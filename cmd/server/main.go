package main

import (
	"context"
	"net/url"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/forwardhttp/go-server/internal/connection"
	"github.com/forwardhttp/go-server/internal/server"
	"github.com/sirupsen/logrus"
)

var (
	logger = logrus.New()
)

func main() {

	brokerURI, _ := url.Parse("http://127.0.0.1:9000")

	connection := connection.New(brokerURI, logger, 4096, 4096, time.Second*5)
	server := server.New(9000, logger, connection)

	// Channel to listen for errors generated by api server
	serverErrors := make(chan error, 1)

	// Channel to listen for interrupts and to run a graceful shutdown
	osSignals := make(chan os.Signal, 1)
	signal.Notify(osSignals, os.Interrupt, syscall.SIGTERM)

	// Start up our server
	go func() {
		serverErrors <- server.Run()
	}()

	// Blocking until read from channel(s)
	select {
	case err := <-serverErrors:
		logger.Fatalf("error starting server: %v", err.Error())

	case <-osSignals:
		logger.Println("starting server shutdown...")
		ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		defer cancel()

		err := server.GracefullyShutdown(ctx)
		if err != nil {
			logger.Fatalf("error trying to shutdown http server: %v", err.Error())
		}

	}

}
